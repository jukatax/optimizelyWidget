// ==UserScript==
// @name         Optimizely X Widget
// @namespace    https://*/*
// @version      6.8.0
// @encoding     utf-8
// @description  Optimizely X Widget
// @author       Yuliyan Yordanov
// @match        https://domain.here/*
// @include      http://*/*
// @include      https://*/*
// @exclude      /(condeco|github|aha|jira|timex|litmos|payslip|launchandlearn|app\.optimizely|webex|ukirp365)/
// @grant        none
// @updateURL    https://raw.githubusercontent.com/jukatax/optimizelyWidget/master/source_js.min.js
// @downloadURL  https://raw.githubusercontent.com/jukatax/optimizelyWidget/master/source_js.min.js
// @grant        unsafeWindow
// @run-at       document-start
// ==/UserScript==
/*jshint esversion:6*/
/*globals document,window,console,requestAnimationFrame,setTimeout */
/*  @url params to force an experiment
 ?optimizely_x=VARIATIONID&optimizely_token=PUBLIC
 ?optimizely_force_tracking=true
 */
/*
In order for the log to work this script has to be injected before the call to Optimizely, in Tampermonkey set the script to be injected at "document start"
 */
(function (a, b) { "use strict"; a.optimizely = a.optimizely || [], a.optimizely.push({ type: "log", level: "error" }); let c = () => { b.getElementsByTagName("head")[0] && b.getElementsByTagName("head")[0] && b.getElementsByTagName("body") && b.getElementsByTagName("body")[0] ? (a.widget = { version: "6.8.0", name: "::yy-optlyWidget::", styles: { bckgrnd_clr: "#f4f7f1", main_clr: "#19405b", active_clr: "#3778ad", font_size: "12px", isTargetPresent: !1, versionWrapper: "position:absolute;top:2px;left:5px;font-size : 0.8em;line-height : 8px;", containerWrapper: "", xwrapper: "padding : 5px 8px; position : absolute; top : 0; right : 0; color : #f00; background : rgba(235,28,36,0.4);cursor : pointer;", results: "font-size : 12px;border : 1px solid #19405b;border-radius : 3px;margin : 10px 0 5px;padding : 5px;", inputField: "margin:0;padding:3px 0;width: auto!important;height: auto!important;display: inline-block;line-height : 14px!important;font-size: 12px!important;", button: "float:none;color : #fff!important;font-size: 12px!important;padding: 3px 10px;width: auto!important; display: inline-block;height: auto;line-height: 14px!important;margin: 0; border : 1px solid #19405b!important;", error: "color : #fff; background : #f00;", hide: "#ccontainer_yuli.hide, #ccontainer_yuli .hide{display : none!important;}", all: "#ccontainer_yuli{position : fixed; z-index : 9999999999; top : 10px;width: auto;min-width: 280px;max-width: 440px; left : 10px; padding : 12px 5px 5px; background : #f4f7f1; box-shadow : 0 0 5px #555; -moz-box-shadow : 0 0 5px #555; -webkit-box-shadow : 0 0 5px #555;color: #19405b;font-family : Helvetica, Arial;font-size: 12px;border-radius: 3px;transition : left 1s ease-in-out;max-height: 100%;overflow-y: scroll;}#ccontainer_yuli div{text-align:left;}#ccontainer_yuli #optlyServerSide div ul{padding:0;margin: 0;}#ccontainer_yuli .positions{ font-size : 0.8em;line-height : 8px;font-style: italic;display: flex; justify-content: space-around; align-items : center;}#ccontainer_yuli .positions span{ display : block; }#ccontainer_yuli .positions span:hover{ cursor:pointer; text-decoration : underline; }#ccontainer_yuli.center{left : calc(50% - 200px);}#ccontainer_yuli.left{left : 10px;}#ccontainer_yuli.right{left  :calc(100% - 440px);}#ccontainer_yuli.hide{display : none!important;}" }, logstyles: "background:orange;color:#000;padding:2px 4px;", clientSideTests: [], serverSideTests: [], targetTests: [], cookieName: "_qa", cookieName2: "ssp" + (b.cookie.match(/sspleft/ig) ? "left" : b.cookie.match(/sspright/ig) ? "right" : b.cookie.match(/sspcenter/ig) ? "center" : "left"), domain: 2 < b.domain.split(".").length ? b.domain.split(".")[b.domain.split(".").length - 2] + "." + b.domain.split(".")[b.domain.split(".").length - 1] : b.domain, count: 0, optlyCounter: 0, targetCounter: 0, sstestsCounter: 0, bertieCounter: 0, countMax: 4, toggleWidget: c => { var d = a.event ? event : c; (d.metaKey || d.ctrlKey) && d.shiftKey && 89 === d.keyCode && b.querySelector("#ccontainer_yuli") && b.querySelector("#ccontainer_yuli").classList.toggle("hide") }, log: (...a) => { console.log.call(null, "%c" + widget.name, widget.logstyles, ...a) }, setCookie: (b, c) => { var e = new Date, d = b, f = document.getElementById("cerror"); if (d) { e.setTime(e.getTime() + 1e3 * (60 * (60 * (24 * c)))); var g = "expires=" + e.toUTCString(); document.cookie = d + "=true;path=/;domain=" + widget.domain + ";" + g, f ? f.innerHTML = "Cookie has been Set!" : null, (-1 === c || "-1" === c) && (document.cookie = "optimizelySegments=0;path=/;domain=" + widget.domain + ";expires=Thu, 18 Dec 2013 12:00:00 UTC;", document.cookie = "optimizelyEndUserId=0;path=/;domain=" + widget.domain + ";expires=Thu, 18 Dec 2013 12:00:00 UTC;", document.cookie = "optimizelyEndUserId=0;path=/;domain=optimizely.com;expires=Thu, 18 Dec 2013 12:00:00 UTC;", document.cookie = "optimizelyRedirectData=0;path=/;domain=" + widget.domain + ";expires=Thu, 18 Dec 2013 12:00:00 UTC;", document.cookie = "optimizelyBuckets=0;path=/;domain=" + widget.domain + ";expires=Thu, 18 Dec 2013 12:00:00 UTC;", document.cookie = "optimizelyEndUserId=0;path=/;domain=" + widget.domain + ";expires=Thu, 18 Dec 2013 12:00:00 UTC;", document.cookie = "optimizelySegments=0;path=/;domain=" + widget.domain + ";expires=Thu, 18 Dec 2013 12:00:00 UTC;", document.cookie = "optimizelyPendingLogEvents=0;path=/;domain=" + widget.domain + ";expires=Thu, 18 Dec 2013 12:00:00 UTC;", document.cookie = d + "=0;path=/;domain=" + widget.domain + ";expires=Thu, 18 Dec 2013 12:00:00 UTC;") } else ceror ? f.innerHTML = "You need to specify a name for the cookie" : null; d && -1 === d.indexOf("ssp") ? setTimeout(() => { f.innerHTML = "", (-1 == c || a.location.search) && (-1 === c || a.location.search.match(d + "=true")) ? -1 === c && a.location.search && a.location.search.match(d + "=true") ? (a.location.search = a.location.search.replace(d + "=true", ""), a.location.replace(a.location.origin + a.location.pathname)) : -1 == c && a.location.replace(a.location.origin + a.location.pathname) : a.widget.setExperiment("&" + d + "=true") }, 1e3) : setTimeout(() => { f ? f.innerHTML = "" : null }, 1e3) }, setExperiment: b => { var c = a.location.search; a.location.search = !!c && /optimizely_x/.test(c) ? c.replace(/optimizely_x=(\d+)?/, "optimizely_x=" + b) : !!c && /\?/.test(c) ? c + "&optimizely_x=" + b : "optimizely_x=" + b }, createwidget: () => { if (!b.getElementById("optly_tests")) { var a = b.createElement("style"); a.id = "optly_tests", a.textContent = widget.styles.all, b.getElementsByTagName("head")[0].appendChild(a) } var c = "<div><div class=\"positions\"><span style=\"" + widget.styles.versionWrapper + "\">v: " + widget.version + "</span> <span data-pos=\"left\">left</span> <span data-pos=\"center\">center</span> <span data-pos=\"right\">right</span>   <span id=\"removewidget\" style=\"" + widget.styles.xwrapper + "\"> X </span></div><div id=\"optimizely_info_data\" style=\"margin: 2px 24px 0 0;\"><div><input type=\"text\" style=\"" + widget.styles.inputField + "\" placeholder=\"cookie name\" id=\"cname_yuli\" value=" + widget.cookieName + " /><button id=\"setcookie\" style=\"" + widget.styles.button + ";background : " + widget.styles.active_clr + "!important;\">Set</button><button id=\"remcookie\" style=\"" + widget.styles.button + ";background : #f00!important;\">Remove</button></div><div id=\"cerror\" style=\"" + widget.styles.error + "\"></div></div><div id=\"optlyX\"></div><div id=\"optlyServerSide\"></div><div id=\"target\"></div><div id=\"bertie\" class=\"hide\" style=\"" + widget.styles.results + "\"></div></div>", d = b.createElement("div"); d.id = "ccontainer_yuli", d.style = widget.styles.containerWrapper, d.setAttribute("class", b.cookie.match(/sspleft/ig) ? "left" : b.cookie.match(/sspright/ig) ? "right" : b.cookie.match(/sspcenter/ig) ? "center" : "left"), d.innerHTML = c, b.querySelector("#ccontainer_yuli") || b.getElementsByTagName("body")[0].appendChild(d) }, addDOMEvents: () => { b.querySelector("#setcookie").addEventListener("click", () => { widget.setCookie(a.widget.cookieName, 60) }, !0), b.querySelector("#remcookie").addEventListener("click", () => { widget.setCookie(a.widget.cookieName, -1) }, !0), b.querySelector("#removewidget").addEventListener("click", () => { b.getElementById("ccontainer_yuli").parentNode.removeChild(b.getElementById("ccontainer_yuli")), b.querySelectorAll("#ccontainer_yuli .positions span").forEach(b => { let c = b.getAttribute("data-pos"); b.removeEventListener("click", a.widget.setWidgetPosition.bind(null, c)) }), b.getElementById("optly_tests") && b.getElementById("optly_tests").parentNode.removeChild(b.getElementById("optly_tests")) }, !1), b.onkeydown = widget.toggleWidget, b.getElementById("cname_yuli").addEventListener("keyup", b => { a.widget.cookieName = b.target.value }), b.querySelectorAll("#ccontainer_yuli .positions span").forEach(b => { let c = b.getAttribute("data-pos"); b.addEventListener("click", a.widget.setWidgetPosition.bind(null, c), !1) }) }, setWidgetPosition: c => { let d = a.widget.cookieName2.substring(3), e = b.getElementById("ccontainer_yuli"); a.widget.setCookie("ssp" + d, -1), a.widget.cookieName2 = "ssp" + c, e && (e.classList.remove(d), e.classList.add(c)), a.widget.setCookie(a.widget.cookieName2, 30) }, getOptlyServerSideTests: () => { if (b.querySelector("#optlyServerSide")) { var c = b.getElementById("ss_tests") ? b.getElementById("ss_tests") : b.createElement("div"); b.getElementById("ss_tests") ? null : c.style = widget.styles.results, b.getElementById("ss_tests") ? null : c.id = "ss_tests"; var d = a.optimizelyData; d ? (widget.serverSideTests = [], b.querySelector("#optlyServerSide").innerHTML = "", -1 === widget.serverSideTests.indexOf("#### Optly Server-side tests: ####") ? widget.serverSideTests.push("#### Optly Server-side tests: ####") : null, widget.serverSideTests.push(JSON.stringify(d))) : (widget.serverSideTests = [], b.querySelector("#optlyServerSide").innerHTML = "", -1 === widget.serverSideTests.indexOf("#### No Optly Server-side experiments running ####") ? widget.serverSideTests.push("#### No Optly Server-side experiments running ####") : null), c.innerHTML = "<ul>" + widget.serverSideTests.join("<br />") + "</ul>", b.querySelector("#optlyServerSide").appendChild(c) } else widget.getOptlyServerSideTests() }, getOptlyClientSideTests: () => { var c, d = {}, e = [], f = b.body; "function" == typeof Object.assign ? Object.assign(d, a.optimizely.get("state").getVariationMap()) : d = JSON.parse(JSON.stringify(a.optimizely.get("state").getVariationMap())), e = -1 === optimizely.get("state").getActiveExperimentIds().indexOf(void 0) ? e.concat(optimizely.get("state").getActiveExperimentIds()) : e, c = optimizely.get("data"), e.length ? e.forEach(function (a, e) { var f = c.experiments[a], g = d[a].name ? d[a].name : d[a], h = b.createElement("div"); h.innerHTML = "<div id=\"test_id_" + e + "\" style='font-size : " + widget.styles.font_size + ";border : 1px solid " + widget.styles.main_clr + ";border-radius : 3px;margin : 0 0 5px;padding : 5px;'>ID: " + a + ",rv:<span id=\"test_version\">" + (optimizely.get("data").revision || optimizely.revision) + "</span><br />" + f.name + " </div>", b.querySelector("#optimizely_info_data").appendChild(h), f.variations.forEach(function (a) { var c = b.createElement("div"); c.style = "margin : 0;padding : 0 0 0 10px;"; var d = !(g !== a.name), f = "color:" + widget.styles.active_clr + ";"; c.innerHTML = d ? "<div style=" + f + "><span id=\"test_name\">" + a.name + " - " + a.id + "<span style='font-style:italic;font-size:'+widget.styles.font_size+';'>(active)</span></div>" : "<div><span id=\"test_name\">" + a.name + " - " + a.id + "</span> - <a href='#' style=" + f + " onclick=\"widget.setExperiment(" + a.id + ")\">activate</a></div>", b.querySelector("#test_id_" + e).appendChild(c) }) }) : b.querySelector("#optlyX").innerHTML = "<div style='" + widget.styles.results + "'>#### No Optimizely experiments running ####</div>" }, initBertie: () => { if (!(bertie && bertie.on)) widget.log("bertie not available...exiting..."); else { let a = document.getElementById("bertie"); widget.log("bertie loaded..."), bertie.onAny(function (b) { widget.log(" bertie.onAny fired...: ", b); var c = b.type || b["@type"]; a.classList.remove("hide"), a.innerHTML = a.textContent.match(c) ? "" : a.innerHTML + "<p><b>" + c + "</b></p>", b && c && "tesco:UIExperimentRendered" === c && widget.getOptlyServerSideTests() }) } }, poll4optlyX: () => { if (!!!!(b.getElementsByTagName("body")[0] && a.optimizely && "function" == typeof a.optimizely.get && a.optimizely.get("state").getVariationMap())) widget.getOptlyClientSideTests(); else if (widget.optlyCounter < widget.countMax) widget.optlyCounter += .5, setTimeout(widget.poll4optlyX, 250); else return void (b.querySelector("#optlyX").innerHTML = "<div style='" + widget.styles.results + "'>#### No Optimizely tag present ####</div>") }, poll4OptlyServerSide: () => { if ("object" == typeof window.optimizelyData) widget.getOptlyServerSideTests(); else if (widget.sstestsCounter < widget.countMax) widget.sstestsCounter += .5, setTimeout(widget.poll4OptlyServerSide, 250); else return void (b.querySelector("#optlyServerSide").innerHTML = "<div style='" + widget.styles.results + "'>#### No Optly server-side experiments ####</div>") }, poll4Bertie: () => { if (!!(a.bertie && a.bertie.on)) widget.initBertie(); else if (widget.bertieCounter < widget.countMax) widget.bertieCounter += .5, setTimeout(widget.poll4Bertie, 500); else return }, init: () => { widget.createwidget(), widget.addDOMEvents(), widget.poll4optlyX(), widget.poll4OptlyServerSide(), widget.poll4Bertie() } }, a.widget.init()) : a.requestAnimationFrame(c) }; "complete" === document.readyState && c(), b.addEventListener("DOMContentLoaded", function b() { "complete" === document.readyState ? c() : a.requestAnimationFrame(b) }) })(window, document);